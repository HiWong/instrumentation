{"name":"Instrumentation","tagline":"An extensible java agent framework that instruments (modifies the bytecode at class loading time) programs running on the JVM, with the purpose of capturing method invocation events (start, finish, errors ...) and notifying custom listeners.","body":"#org.brutusin:instrumentation [![Build Status](https://api.travis-ci.org/brutusin/instrumentation.svg?branch=master)](https://travis-ci.org/brutusin/instrumentation) [![Maven Central Latest Version](https://maven-badges.herokuapp.com/maven-central/org.brutusin/instrumentation/badge.svg)](https://maven-badges.herokuapp.com/maven-central/org.brutusin/instrumentation/)\r\nAn extensible java agent framework that instruments programs running on the JVM (modifying the bytecode at class loading time), with the purpose of capturing method invocation events (start, finish, errors ...) and notifying custom listeners.\r\n\r\n**Table of Contents**\r\n- [org.brutusin:instrumentation](#orgbrutusininstrumentation)\r\n  - [How it works](#how-it-works)\r\n  - [Maven dependency](#maven-dependency)\r\n  - [Example](#example)\r\n    - [Implementation](#implementation)\r\n    - [Packaging](#packaging)\r\n    - [JRE launching](#jre-launching)\r\n    - [Main stack](#main-stack)\r\n    - [Brutusin dependent modules](#brutusin-dependent-modules)\r\n    - [Support, bugs and requests](#support-bugs-and-requests)\r\n    - [Authors](#authors)\r\n    - [License](#license)\r\n\t\r\n##How it works\r\nThe [java instrumentation package](http://docs.oracle.com/javase/8/docs/api/java/lang/instrument/package-summary.html) introduced in JDK1.5, provides a simple way to transform java-class definition at loading time, consisting basically in a `byte[]` to `byte[]` transformation, by the so called \"java agents\".\r\n\r\nThis module provides an agent ([org.brutusin.instrumentation.Agent](src/main/java/org/brutusin/instrumentation/Agent.java)) that creates an execution listener instance (from the name of a concrete class extending [org.brutusin.instrumentation.Interceptor](src/main/java/org/brutusin/instrumentation/Interceptor.java) passed from the JVM agent arguments) and, making use of the [ASM library](http://asm.ow2.org/), introduces a series of instructions in the method definitions of the classes to be loaded (classes and methods can be skipped) to notify these execution events to the listener.\r\n\r\nFrom a simplified point of view, the dynamic transformation turns a method like this: \r\n```java\r\npublic Object foo(Object bar){\r\n\treturn new Object();\r\n}\r\n```\r\n\r\ninto that:\r\n```java\r\npublic Object foo(Object bar){\r\n\tonStart(bar);\r\n\ttry{\r\n\t\tObject ret = new Object();\r\n\t\tonFinished(ret);\r\n\t\treturn ret;\r\n\t} catch(Throwable th){\r\n\t\tonThrowable(th);\r\n\t\tthrow th; // at bytecode level this is legal\r\n\t}\r\n}\r\n```\r\n\r\nallowing your custom listener to be notified.\r\n\r\n##Maven dependency \r\n\r\n```xml\r\n<dependency>\r\n    <groupId>org.brutusin</groupId>\r\n    <artifactId>instrumentation</artifactId>\r\n</dependency>\r\n```\r\nClick [here](http://search.maven.org/#search%7Cga%7C1%7Cg%3A%22org.brutusin%22%20a%3A%22instrumentation%22) to see the latest available version released to the Maven Central Repository.\r\n\r\nIf you are not using maven and need help you can ask [here](https://github.com/brutusin/instrumentation/issues).\r\n\r\n##Example\r\n*See [logging-instrumentation](https://github.com/brutusin/logging-instrumentation) for a complete working example.*\r\n###Implementation\r\nCreate the following listener implementation:\r\n\r\n```java\r\npackage mypackage;\r\n\r\npublic class MyInterceptor extends Interceptor {\r\n\r\n    @Override\r\n    public void init(String arg) {\r\n\t\tSystem.out.println(\"Interceptor args: \" + arg);\r\n    }\r\n\r\n    @Override\r\n    public boolean interceptClass(String className, byte[] byteCode) {\r\n        return true; // all classes can be intrumented\r\n    }\r\n\r\n    @Override\r\n    public boolean interceptMethod(ClassNode cn,MethodNode mn) {\r\n        return true; // all methods are instrumented\r\n    }\r\n\r\n    @Override\r\n    protected void doOnStart(Method m, Object[] arg, String executionId) {\r\n        System.out.println(\"doOnStart \" + m + \" \" + executionId);\r\n    }\r\n\r\n    @Override\r\n    protected void doOnThrowableThrown(Method m, Throwable throwable, String executionId) {\r\n        System.out.println(\"doOnThrowableThrown \" + m + \" \" + executionId);\r\n    }\r\n\r\n    @Override\r\n    protected void doOnThrowableUncatched(Method m, Throwable throwable, String executionId) {\r\n        System.out.println(\"doOnThrowableUncatched \" + m + \" \" + executionId);\r\n    }\r\n\r\n    @Override\r\n    protected void doOnFinish(Method m, Object result, String executionId) {\r\n        System.out.println(\"doOnFinish \" + m + \" \" + executionId);\r\n    }\r\n}\r\n```\r\n###Packaging\r\nCreate a [fat-jar](http://maven.apache.org/plugins/maven-assembly-plugin/descriptor-refs.html#jar-with-dependencies) with the previous class and its dependencies. Add the following attribute to  the manifest of the agent JAR:\r\n```\r\nPremain-Class: org.brutusin.instrumentation.Agent\r\n```\r\nSuppose this jar to be named `myagent.jar`\r\n###JRE launching\r\nRun (at least JRE 1.5) the desired java application with the following JVM options: (suppossing myagent.jar located in the working directory)\r\n```\r\n-javaagent:myagent.jar=mypackage.MyInterceptor;an_interceptor_optional_parameter\r\n```\r\n\r\n##Main stack\r\nThis module could not be possible without:\r\n* [org.ow2.asm:asm-all](http://asm.ow2.org/)\r\n\r\n## Brutusin dependent modules\r\n* [org.brutusin:logging-instrumentation](https://github.com/brutusin/logging-instrumentation)\r\n\r\n## Support, bugs and requests\r\nhttps://github.com/brutusin/instrumentation/issues\r\n\r\n## Authors\r\n\r\n- Ignacio del Valle Alles (<https://github.com/idelvall/>)\r\n\r\nContributions are always welcome and greatly appreciated!\r\n\r\n##License\r\nApache License, Version 2.0\r\nhttp://www.apache.org/licenses/LICENSE-2.0\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}